/* Browsers can apply default margin and padding values to specific elements. 
To make sure your piano looks correct, you need to reset the box model. */

/* Add an html rule selector to your CSS file, and set the box-sizing property to border-box. */
html {
    box-sizing: border-box;
}
/*
Now that you have reset the html box model, you need to pass that on to the elements within as well. 
To do this, you can set the box-sizing property to inherit, which will tell the targeted elements to 
use the same value as the parent element.
You will also need to target the pseudo-elements, which are special keywords that follow a selector. 
The two pseudo-elements you will be using are the ::before and ::after pseudo-elements.
The ::before selector creates a pseudo-element which is the first child of the selected element, 
while the ::after selector creates a pseudo-element which is the last child of the selected element. 
These pseudo-elements are often used to create cosmetic content, which you will see later in this project. */

/* create a CSS selector to target all elements with *, and include the pseudo-elements 
with ::before and ::after. Set the box-sizing property to inherit. */
*, ::before, ::after {
    box-sizing: inherit;
} 

/* Now target your #piano element with an id selector. Set background-color property to #00471b, 
the width property to 992px and the height property to 290px. */
#piano {
    background-color: #00471b;
    width: 992px;
    height: 290px;
    /* Set the margin of the #piano to 80px auto. */
    margin: 80px auto;
    /* Move the keys into position by adjusting the #piano selector. Set the padding property to 90px 20px 0 20px. */
    padding: 90px 20px 0 20px;
    /* The img element needs its parent to have a position set as a point of reference. Set the position of the #piano selector to relative. */
    position: relative;
    /* To smooth the sharp edges of the piano and keys, start by giving the #piano a border-radius of 10px. */
    border-radius: 10px;
}

/* Time to style the keys. Below the #piano rule, target the .keys element with a class selector. 
Give the new rule a background-color property of #040404, a width property of 949px and a height property of 180px. */
.keys {
    background-color: #040404;
    width: 949px;
    height: 180px;
    /* Give the .keys a padding-left of 2px. */
    padding-left: 2px;
    /* Set overflow to hidden in the first .keys selector, to take care of this issue. 
    This property will hide any element that is pushed outside the set width value of .keys. */
    overflow: hidden;
    
}

/* Time to style the keys themselves. Create a class selector for the .key elements. Set the background-color set to the value #ffffff, 
the position property to relative, the width property to 41px, and the height property to 175px */
.key {
    background-color: #ffffff;
    position: relative;
    width: 41px;
    height: 175px;
    /* Give the .key a margin of 2px and a float property set to left. */
    margin: 2px;
    float: left;
    /* Give the .key selector a border-radius value of 0 0 3px 3px. */
    border-radius: 0 0 3px 3px;
}

/* To create the black keys, add a new .key.black--key::after selector. This will target the elements with the class key black--key, 
and select the pseudo-element after these elements in the HTML. In the new selector, set the background-color to #1d1e22. 
Also set the content property to "". This will make the pseudo-elements empty. */
.key.black--key::after {
    background-color: #1d1e22;
    content: "";
    /* Give the .key.black--key::after a position property set to absolute and a left property set to -18px. */
    position: absolute;
    left: -18px;
    /* For the .key.black--key::after, set the width to 32px and the height to 100px. */
    width: 32px;
    height: 100px;
    /* Give the .key.black--key::after selector a border-radius of 0 0 3px 3px to match the keys. */
    border-radius: 0 0 3px 3px;
}

/* Start styling the logo by creating a .logo selector. Set the width to 200px, a position of absolute and a top set to 23px. */
.logo {
    width: 200px;
    position: absolute;
    top: 23px;
}

/*
The @media at-rule, also known as a media query, is used to conditionally apply CSS. Media queries are commonly used to apply CSS 
based on the viewport width using the max-width and min-width properties.In the below example the padding is applied to the .card 
class when the viewport is 960px wide and below.

@media (max-width: 960px) {
  .card {
    padding: 2rem;
  }
}
Add a media query that will be applied when the viewport is 768px wide and below. */
@media (max-width: 768px) {
    /* Add a new #piano selector within your @media query, and set the width to 358px. */
    #piano {
        width: 358px;
    }
    /* Within the @media query, add a .keys selector and set the width to 318px. */
    .keys {
        width: 318px;
    }
    /* Now add a .logo selector to the @media query, and set the width property to 150px. */
    .logo {
        width: 150px;
    }
}

/* Add another @media rule to apply if the browser window is wider than 769px but smaller than 1199px. */
@media (min-width: 769px) and (max-width: 1199px) {
    /* For the new @media rule, set the width of the #piano to 675px and the width of the .keys to 633px. */
    #piano {
        width: 675px;
    }
    .keys {
        width: 633px;
    }
}